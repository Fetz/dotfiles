set nocompatible              " be iMproved, required
filetype off                  " required

" check file change every 4 seconds ('CursorHold') and reload the buffer upon detecting change
set autoread
au CursorHold * checktime

" set re=1

" ----------------------------------------------------------------
" UI config
" ----------------------------------------------------------------
set number              " and show line numbers
set showcmd             " show incomplete commands
set cursorline          " highlight current line
set ruler               " always show cursor
set guioptions-=T       " hide the toolbar
set nofoldenable        " disable folding because it is evil
set nowrap              " turn word wrap off
set shell=/bin/bash

" set the status line to something useful
" set statusline=%f\ %=L:%l/%L\ %c\ (%p%%)

" enable mouse for scrolling
if has('mouse')
    set mouse=a
    if &term =~ 'xterm' || &term =~ 'screen'
        if has('mouse_sgr')
          set ttymouse=sgr
          autocmd VimEnter,FocusGained,BufEnter * set ttymouse=sgr
        else
          set ttymouse=xterm2
          autocmd VimEnter,FocusGained,BufEnter * set ttymouse=xterm2
        endif
    endif
endif

if has('nvim')
    let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
    let g:python_host_prog='/usr/local/bin/python'
endif

" scroll with more context
set scrolloff=10

" code style
set expandtab     " convert tabs to spaces
set tabstop=4     " set tab size
set shiftwidth=4  " the number of spaces inserted for a tab
set softtabstop=4 " number of spaces in tab when editing

" allow copy&paste system
set clipboard=unnamed

" make backspace to work
set backspace=indent,eol,start

" highlight tailing whitespace
set list listchars=tab:\ \ ,trail:Â·

" encoding is utf 8
set encoding=utf-8
set fileencoding=utf-8

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

set background=dark
colorscheme hybrid
let g:hybrid_use_iTerm_colors = 1
hi Conceal guibg=Black guifg=DarkMagenta

set nobackup
set nowritebackup
set noswapfile

" ----------------------------------------------------------------
" key mapping
" ----------------------------------------------------------------

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " "
let g:mapleader = " "

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>

" make shift+tab and tab indent
vmap <Tab> >gv
vmap <S-Tab> <gv
imap <S-Tab> <C-o><<

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

"move to line with <nr>Enter, Enter end of file, backspace beginning
nnoremap <CR> G
nnoremap <BS> gg

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
nnoremap \ :Ags<SPACE>

" Visual mode
nmap <Leader>v V

" ----------------------------------------------------------------
" HISTORY & SEARCH
" ----------------------------------------------------------------

" command history
set history=100

" show incomplete commands
set showcmd

" incremental searching
set incsearch

" highlight search
set hlsearch

" ignore case in search
set smartcase

" lets make sure we don't show these files
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*.,*/.DS_Store,*/node_modules

" search results to show in quickfix
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

" ----------------------------------------------------------------
" PLugins
" ----------------------------------------------------------------

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" start plugin definition
Plugin 'scrooloose/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-commentary.git'
Plugin 'bling/vim-airline'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'terryma/vim-expand-region'
Plugin 'godlygeek/tabular'
"Plugin 'ashisha/image.vim'
Plugin 'gabesoft/vim-ags'
Plugin 'nathanaelkane/vim-indent-guides'
" Plugin 'Raimondi/delimitMate'
Plugin 'jiangmiao/auto-pairs'
Plugin 'airblade/vim-gitgutter'
Plugin 'editorconfig/editorconfig-vim'
if !has('nvim')
    Plugin 'tmux-plugins/vim-tmux-focus-events'
    Plugin 'jszakmeister/vim-togglecursor'
endif

" web dev
Plugin 'mattn/emmet-vim'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'plasticboy/vim-markdown'
" Plugin 'jaxbot/semantic-highlight.vim'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
" Plugin 'sheerun/vim-polyglot'
Plugin 'heavenshell/vim-jsdoc'
Plugin 'vim-scripts/Flex-4'
" Plugin 'marijnh/tern_for_vim'


" All of your Plugins must be added before the following line
call vundle#end()            " required
" turn on syntax highlighting when not in vimdiff mode
if !&diff
	syntax on
endif
filetype plugin indent on    " required

" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" remove whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" set-up ctrlp to include hidden files in its search
let g:ctrlp_show_hidden=1

" disable ctrlp's feature where it tries to intelligently work out the
" current working directory to search within
let g:ctrlp_working_path_mode=0

" don't let ctrlp take over the screen!
let g:ctrlp_max_height=20

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" ----------------------------------------------------------------
" Easy Motion
" ----------------------------------------------------------------
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap <Leader>s <Plug>(easymotion-s)

" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap <Leader>S <Plug>(easymotion-s2)

" Bidirectional & within line 't' motion
omap <Leader>t <Plug>(easymotion-bd-tl)

"incremental search
nmap / <Plug>(easymotion-sn)
xmap / <Esc><Plug>(easymotion-sn)\v%V
omap / <Plug>(easymotion-tn)
nnoremap g/ /

" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" expand region
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" vline
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" start NERDTree on start-up and focus active window
if !&diff
	autocmd VimEnter * NERDTree
    autocmd BufEnter * NERDTreeMirror
	autocmd VimEnter * wincmd p
endif

" Set NerdTree to be visible in tabs
let g:nerdtree_tabs_open_on_new_tab = 1
let g:nerdtree_tabs_autofind = 1


" configure indent plugin
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
let g:indent_guides_enable_on_vim_startup = 1

" configure gitgutter
let g:gitgutter_eager = 0


" configure vim-jsdoc
let g:jsdoc_default_mapping = 0
let g:jsdoc_underscore_private = 1
nmap <Leader>c :JsDoc<CR>


" configure as3
autocmd BufRead *.as set filetype=actionscript
autocmd BufRead *.mxml set filetype=mxml

" configure weird es6
au BufNewFile,BufRead *.es6 setf javascript

" configure neocomplete
" let g:neocomplete#enable_at_startup = 1
" let g:neocomplete#enable_smart_case = 1
" let g:neosnippet#expand_word_boundary = 1
" let g:neocomplete#sources#syntax#min_keyword_length = 3
" let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" Recommended key-mappings.
" <CR>: close popup and save indent.
" inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
" function! s:my_cr_function()
"  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
" endfunction
" <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><C-y>  neocomplete#close_popup()
" inoremap <expr><C-e>  neocomplete#cancel_popup()

" Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif


