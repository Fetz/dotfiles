"
"   ▓█████▒▓█████▓▄▄█████▓▒███████▒
"  ▓██   ▒ ▓█   ▀▓  ██▒ ▓▒▒ ▒ ▒ ▄▀░
"  ▒████ ░ ▒███  ▒ ▓██░ ▒░░ ▒ ▄▀▒░
"  ░▓█▒  ░ ▒▓█  ▄░ ▓██▓ ░   ▄▀▒   ░
"  ░▒█░    ░▒████▒ ▒██▒ ░ ▒███████▒
"   ▒ ░    ░░ ▒░ ░ ▒ ░░   ░▒▒ ▓░▒░▒
"   ░       ░ ░  ░   ░    ░░▒ ▒ ░ ▒
"   ░ ░       ░    ░      ░ ░ ░ ░ ░
"             ░  ░          ░ ░
"                         ░
"

set nocompatible              " be iMproved, required
filetype off                  " required

" check file change every 4 seconds ('CursorHold') and reload the buffer upon detecting change
set autoread
au CursorHold * checktime

" No annoying sound on errors
set noerrorbells
set novisualbell
" set t_vb=
set tm=500

" set re=1

" ----------------------------------------------------------------
" UI config
" ----------------------------------------------------------------
set number              " and show line numbers
set showcmd             " show incomplete commands
set cursorline          " highlight current line
set ruler               " always show cursor
set guioptions-=T       " hide the toolbar
syntax on
" set foldmethod=syntax
" set foldlevelstart=1
" let javaScript_fold=1

set nofoldenable        " disable folding because it is evil
" set nowrap              " turn word wrap off
set shell=/bin/bash

" set the status line to something useful
" set statusline=%f\ %=L:%l/%L\ %c\ (%p%%)

" enable mouse for scrolling
if has('mouse')
    set mouse=a
    if &term =~ 'xterm' || &term =~ 'screen'
        if has('mouse_sgr')
          set ttymouse=sgr
          autocmd VimEnter,FocusGained,BufEnter * set ttymouse=sgr
        else
          set ttymouse=xterm2
          autocmd VimEnter,FocusGained,BufEnter * set ttymouse=xterm2
        endif
    endif
endif

if has('nvim')
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
    let g:python_host_prog='/usr/local/bin/python'
    let g:python3_host_prog = '/usr/local/bin/python3'
endif

" scroll with more context
set scrolloff=10

" code style
set expandtab     " convert tabs to spaces
set tabstop=2     " set tab size
set shiftwidth=2  " the number of spaces inserted for a tab
set softtabstop=2 " number of spaces in tab when editing

" allow copy&paste system
set clipboard=unnamed

" make backspace to work
set backspace=indent,eol,start

" highlight tailing whitespace
set list listchars=tab:\ \ ,trail:·

" encoding is utf 8
set encoding=utf-8
set fileencoding=utf-8

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

set nobackup
set nowritebackup
set noswapfile

" Move a line of text using ALT+[jk]
nmap ∆ mz:m+<cr>`z
nmap ˚ mz:m-2<cr>`z
vmap ∆ :m'>+<cr>`<my`>mzgv`yo`z
vmap ˚ :m'<-2<cr>`>my`<mzgv`yo`z

" ----------------------------------------------------------------
" key mapping
" ----------------------------------------------------------------

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " "
let g:mapleader = " "

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
" function! InsertTabWrapper()
"     let col = col('.') - 1
"     if !col || getline('.')[col - 1] !~ '\k'
"         return "\<tab>"
"     else
"         return "\<c-p>"
"     endif
" endfunction
" inoremap <Tab> <c-r>=InsertTabWrapper()<cr>

" make shift+tab and tab indent
vmap <Tab> >gv
vmap <S-Tab> <gv
imap <S-Tab> <C-o><<

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

"move to line with <nr>Enter, Enter end of file, backspace beginning
nnoremap <CR> G
nnoremap <BS> gg

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
nnoremap \ :Ags<SPACE>

" ----------------------------------------------------------------
" HISTORY & SEARCH
" ----------------------------------------------------------------

" command history
set history=100

" show incomplete commands
set showcmd

" incremental searching
set incsearch

" highlight search
set hlsearch

" ignore case in search
set smartcase

" lets make sure we don't show these files
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*.,*/.DS_Store,*/node_modules

" search results to show in quickfix
" command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

" ----------------------------------------------------------------
" PLugins
" ----------------------------------------------------------------

let s:use_deoplete        = 1 && has('nvim') && has('python3')
let s:use_neocomplete     = s:use_deoplete && has('lua')

" Load vim-plug
if empty(glob("~/.vim/autoload/plug.vim"))
    execute '!mkdir ~/.vim/autoload/'
    execute '!curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif


" set the runtime path to include Vundle and initialize
" set rtp+=~/.vim/bundle/Vundle.vim
" call vundle#begin()
call plug#begin('~/.vim/plugged')

" start plugin definition
if s:use_neocomplete
    Plug 'Shougo/neocomplete.vim'
elseif s:use_deoplete
    function! DoRemote(arg)
        UpdateRemotePlugins
    endfunction
    Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
endif

let g:has_completion =
        \ exists("g:plugs['neocomplete.vim']")
        \ || exists("g:plugs['deoplete.nvim']")

if g:has_completion
    " Mixed-filetype completion for Shougo complete, e.g. highlight JS within
    " Markdown fenced code blocks.
    Plug 'Shougo/context_filetype.vim'

    " Include completion
    Plug 'Shougo/neoinclude.vim'

    Plug 'Shougo/neosnippet'
                \| Plug 'honza/vim-snippets'
                \| Plug 'Shougo/neosnippet-snippets'
endif

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeTabsToggle' }
Plug 'jistr/vim-nerdtree-tabs', { 'on': 'NERDTreeTabsToggle' }
" <Plug> to not move on * search function
Plug 'haya14busa/vim-asterisk'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
" Plug 'tpope/vim-commentary.git'
Plug 'tomtom/tcomment_vim'
Plug 'bling/vim-airline'
Plug 'Lokaltog/vim-easymotion'
Plug 'terryma/vim-multiple-cursors'
Plug 'terryma/vim-expand-region'
Plug 'osyo-manga/vim-over'
Plug 'godlygeek/tabular', { 'on': ['Tabularize'] }
Plug 'gabesoft/vim-ags'
Plug 'nathanaelkane/vim-indent-guides'
" Plug 'Raimondi/delimitMate'
" Plug 'jiangmiao/auto-pairs'
Plug 'airblade/vim-gitgutter'
Plug 'editorconfig/editorconfig-vim'
Plug 'tmux-plugins/vim-tmux'
Plug 'christoomey/vim-tmux-navigator'
Plug 'jeetsukumaran/vim-buffergator'

Plug 'jordwalke/VimSplitBalancer'
" Plug 'zhaocai/GoldenView.Vim'

" which key / guide key in vim
Plug 'hecal3/vim-leader-guide'

" add gS to smart split lines like comma lists and html tags
Plug 'AndrewRadev/splitjoin.vim'

if has('nvim')
    Plug 'morhetz/gruvbox'
else
    Plug 'tmux-plugins/vim-tmux-focus-events'
    Plug 'jszakmeister/vim-togglecursor'
endif

" web dev
Plug 'mattn/emmet-vim'
Plug 'ingydotnet/yaml-vim', { 'for': 'yaml' }
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'benekastah/neomake'
" Plugin 'jaxbot/semantic-highlight.vim'
Plug 'vim-scripts/Flex-4'

" ========================================================================
" Language: HTML, XML, and generators: mustache, handlebars
" ========================================================================

Plug 'othree/html5.vim'
Plug 'mustache/vim-mustache-handlebars'
Plug 'davidosomething/syntastic-hbstidy'

" ========================================================================
" Language: SCSS
" ========================================================================
Plug 'JulesWang/css.vim'
        \| Plug 'hail2u/vim-css3-syntax'
        \| Plug 'cakebaker/scss-syntax.vim'
Plug 'othree/csscomplete.vim'

" ========================================================================
" Language: JavaScript / ES.NEXT / JSON
" ========================================================================
Plug 'elzr/vim-json'
" detect extensionless node scripts (executables) via shebang
" and add gf for going to node_modules files
" Plug 'othree/yajs.vim', { 'for': 'javascript' }
" Plug 'gavocanov/vim-js-indent', { 'for': 'javascript' }
Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'javascript.jsx'] }
Plug 'mxw/vim-jsx', { 'for': ['javascript', 'javascript.jsx'] }

Plug 'moll/vim-node'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'othree/es.next.syntax.vim'
Plug 'mxw/vim-jsx'
Plug '1995eaton/vim-better-javascript-completion'

Plug 'marijnh/tern_for_vim', { 'do': 'npm install' }
Plug 'carlitux/deoplete-ternjs'
Plug 'heavenshell/vim-jsdoc'
Plug 'othree/jspc.vim'

Plug 'elmcast/elm-vim', { 'for': 'elm' }

" All of your Plugins must be added before the following line
call plug#end()

" turn on syntax highlighting when not in vimdiff mode
" if !&diff
" syntax on
" endif
filetype plugin indent on    " required


" ========================================================================
" SET THEME
" ========================================================================

set background=dark
if has('nvim')
    let g:gruvbox_italic=1
    colorscheme gruvbox
else
    colorscheme hybrid
    let g:hybrid_use_iTerm_colors = 1
    hi Conceal guibg=Black guifg=DarkMagenta
endif

" remove whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" set-up ctrlp to include hidden files in its search
let g:ctrlp_show_hidden=1

" disable ctrlp's feature where it tries to intelligently work out the
" current working directory to search within
let g:ctrlp_working_path_mode=0

" don't let ctrlp take over the screen!
let g:ctrlp_max_height=20

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif


" expand region
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" vline
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" NERDTree
let g:nerdtree_tabs_autofind = 1
" map <Leader>pt :NERDTreeToggle<CR>

" configure indent plugin
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
let g:indent_guides_enable_on_vim_startup = 1

" configure gitgutter
let g:gitgutter_eager = 0

" configure neomake
if executable('npm')
    if !executable('eslint')
        execute '!npm install -g eslint babel-eslint eslint-plugin-import eslint-plugin-react eslint-plugin-jsx-a11y eslint-config-airbnb;'
    endif
    let g:neomake_javascript_enabled_makers = ['eslint']
endif

" javascript libraries syntax
let g:used_javascript_libs = 'jquery,underscore,lodash,react,flux,chai,sinon,gulp'

" configure vim-jsdoc
let g:jsdoc_default_mapping = 0
let g:jsdoc_underscore_private = 1

" " configure vim-javascript
" let g:javascript_enable_domhtmlcss = 1
" let g:javascript_conceal_function       = "ƒ"
" let g:javascript_conceal_null           = "ø"
" let g:javascript_conceal_this           = "@"
" let g:javascript_conceal_return         = "⇚"
" let g:javascript_conceal_undefined      = "¿"
" let g:javascript_conceal_NaN            = "ℕ"
" let g:javascript_conceal_prototype      = "¶"
" let g:javascript_conceal_static         = "•"
" let g:javascript_conceal_super          = "Ω"
" let g:javascript_conceal_arrow_function = "⇒"
"
" configure jsx
let g:jsx_ext_required = 0

" configure as3
autocmd BufRead *.as set filetype=actionscript
autocmd BufRead *.mxml set filetype=mxml

" goldenView
" set textwidth=80
let g:goldenview__enable_default_mapping = 0
let g:goldenview__enable_at_startup = 0

" deoplete
if (exists("g:plugs['deoplete.nvim']"))
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#disable_auto_complete = 0
    let g:deoplete#file#enable_buffer_path = 1
    let g:deoplete#keyword_patterns = {}
    let g:deoplete#keyword_patterns.clojure = '[\w!$%&*+/:<=>?@\^_~\-\.]*'

    autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
    if !exists('g:deoplete#omni#input_patterns')
        let g:deoplete#omni#input_patterns = {}
    endif
    let g:tern_request_timeout = 3
    let g:tern_request_timeout = 0.4

    " completion
    augroup omnifuncs
        autocmd!
        autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    augroup end

    " tern
    if exists('g:plugs["tern_for_vim"]')
        let g:tern_show_argument_hints = 'on_hold'
        let g:tern_show_signature_in_pum = 1

        autocmd FileType javascript setlocal omnifunc=tern#Complete
    endif
    "
    " " deoplete tab-complete
    " inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : deoplete#mappings#manual_complete()
    " " ,<Tab> for regular tab
    " inoremap <Leader><Tab> <Space><Space>

    " Plugin key-mappings.
    let g:neosnippet#enable_snipmate_compatibility = 1
    " Tell Neosnippet about the other snippets
    let g:neosnippet#snippets_directory='~/.vim/snippets/'

    imap <C-b>     <Plug>(neosnippet_expand_or_jump)
    smap <C-b>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-b>     <Plug>(neosnippet_expand_target)

    " fix issues with multiple cursors and complete
    function! Multiple_cursors_before()
        let b:deoplete_disable_auto_complete = 1
        if exists(':NeoCompleteLock')==2
            exe 'NeoCompleteLock'
        endif
    endfunction

    function! Multiple_cursors_after()
        let b:deoplete_disable_auto_complete = 0
        if exists(':NeoCompleteUnlock')==2
            exe 'NeoCompleteUnlock'
        endif
    endfunction

endif


" buffergator
let g:buffergator_suppress_keymaps = 1 " Disable default mappings

" ----------------------------------------------------------------
" Easy Motion
" ----------------------------------------------------------------
let g:EasyMotion_do_mapping = 0 " Disable default mappings

"incremental search
nmap / <Plug>(easymotion-sn)
xmap / <Esc><Plug>(easymotion-sn)\v%V
omap / <Plug>(easymotion-tn)
nnoremap g/ /

" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1

" ----------------------------------------------------------------
" Leader guide config
" ----------------------------------------------------------------
function! s:my_displayfunc()
    let g:leaderGuide#displayname =
                \ substitute(g:leaderGuide#displayname, '\c<cr>$', '', '')
    let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '^<Plug>', '', '')
    let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '^guide-.*-', '', '')
    let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '^<C-w>j', 'down', '')
    let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '^<C-w>k', 'up', '')
    let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '^<C-w>h', 'left', '')
    let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '^<C-w>l', 'right', '')
endfunction
let g:leaderGuide_displayfunc = [function("s:my_displayfunc")]
let g:lmap =  {}

" <leader>p [project] -------------------------------------------
let g:lmap.p = {
            \'name' : 'Project',
            \'t': [':NERDTreeTabsToggle', 'open tree'],
            \}

nnoremap <Plug>guide-project-find :CtrlP<CR>
nmap <leader>pf <Plug>guide-project-find

" <leader>w [windows] -------------------------------------------
let g:lmap.w = { 'name' : 'windows' }
nnoremap <leader>wj <C-w>j
nnoremap <leader>wk <C-w>k
nnoremap <leader>wh <C-w>h
nnoremap <leader>wl <C-w>l

" <leader>b [buffer] -------------------------------------------
let g:lmap.b = {
            \'name' : 'buffer',
            \'n': ['new', 'new'],
            \'d': ['bdelete', 'delete'],
            \'b': ['BuffergatorToggle', 'list'],
            \'t': ['BuffergatorTabsOpen', 'tabs open'],
            \'T': ['BuffergatorTabsClose', 'tabs close'],
            \}

nnoremap <Plug>guide-buffer-find :CtrlPBuffer<CR>
nmap <leader>bf <Plug>guide-buffer-find

" <leader>e [errors] ---------------------------------------------
let g:lmap.e = {
            \'name' : 'error',
            \'o'    : ['lopen',   'open location window'],
            \'c'    : ['lclose',  'close location window'],
            \','    : ['ll',      'go to current error/warning'],
            \'en'   : ['lnext',   'next error/warning'],
            \'ep'   : ['lprev',   'previous error/warning'],
            \}

" <leader>w [jump/join/split] -----------------------------------
let g:lmap.j = {
            \'name': 'jump/join/split',
            \'j': ['call feedkeys("\<Plug>(easymotion-overwin-f)")', 'goto char'],
            \'k': ['call feedkeys("\<Plug>(easymotion-overwin-f2)")', 'goto char-2'],
            \'l': ['call feedkeys("\<Plug>(easymotion-overwin-line)")', 'goto line'],
            \}

" <leader>w [jump/join/split] -----------------------------------
let g:lmap.f = {
            \'name' : 'file',
            \'s': ['w', 'save'],
            \'q': ['q', 'close'],
            \'x': ['q!', 'forget'],
            \'a': ['qa', 'close all'],
            \'d': ['call delete(expand("%")) | bdelete!', 'delete current'],
            \}

nnoremap <Plug>guide-file-find :Ags<SPACE>
nmap <leader>ff <Plug>guide-file-find


" <leader>c [config] ---------------------------------------------

let g:lmap.c = {
            \'name' : 'config',
            \'d'    : ['e $MYVIMRC',   'dotfile'],
            \}

nnoremap <Plug>guide-config-reload :so $MYVIMRC<CR>
nmap <leader>cr <Plug>guide-config-reload

call leaderGuide#register_prefix_descriptions("<Space>", "g:lmap")
nnoremap <silent> <leader> :<c-u>LeaderGuide '<Space>'<CR>
vnoremap <silent> <leader> :<c-u>LeaderGuideVisual '<Space>'<CR>

" nmap <Leader>c :JsDoc<CR>

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif


